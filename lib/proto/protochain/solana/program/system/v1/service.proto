syntax = "proto3";

package protochain.solana.program.system.v1;

import "protochain/solana/transaction/v1/instruction.proto";

option go_package = "github.com/BRBussy/protochain/lib/go/protochain/solana/program/system/v1;system_v1";

service Service {
  // Core system program operations - all return composable instructions
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Transfer(TransferRequest) returns (TransferResponse);
  rpc Allocate(AllocateRequest) returns (AllocateResponse);
  rpc Assign(AssignRequest) returns (AssignResponse);
  rpc CreateWithSeed(CreateWithSeedRequest) returns (CreateWithSeedResponse);

  // Extended system program operations
  rpc AllocateWithSeed(AllocateWithSeedRequest) returns (AllocateWithSeedResponse);
  rpc AssignWithSeed(AssignWithSeedRequest) returns (AssignWithSeedResponse);
  rpc TransferWithSeed(TransferWithSeedRequest) returns (TransferWithSeedResponse);
  rpc InitializeNonceAccount(InitializeNonceAccountRequest) returns (InitializeNonceAccountResponse);
  rpc AuthorizeNonceAccount(AuthorizeNonceAccountRequest) returns (AuthorizeNonceAccountResponse);
  rpc WithdrawNonceAccount(WithdrawNonceAccountRequest) returns (WithdrawNonceAccountResponse);
  rpc AdvanceNonceAccount(AdvanceNonceAccountRequest) returns (AdvanceNonceAccountResponse);
  rpc UpgradeNonceAccount(UpgradeNonceAccountRequest) returns (UpgradeNonceAccountResponse);
}

// CreateRequest represents the parameters needed to create a new Solana account
// Maps to the Solana system program's create_account instruction
message CreateRequest {
  // The account that will pay for the new account creation (must be a signer)
  string payer = 1;
  
  // The public key of the new account to be created (must be a signer)
  string new_account = 2;
  
  // The program that will own the new account (defaults to system program)
  string owner = 3;
  
  // Amount of lamports to transfer to the new account
  uint64 lamports = 4;
  
  // Number of bytes of memory to allocate for the account
  uint64 space = 5;
}

// TransferRequest transfers SOL between accounts
message TransferRequest {
  // The account sending the lamports (must be a signer)
  string from = 1;
  
  // The account receiving the lamports
  string to = 2;
  
  // Amount of lamports to transfer
  uint64 lamports = 3;
}

// AllocateRequest allocates space for an account
message AllocateRequest {
  // The account to allocate space for (must be a signer)
  string account = 1;
  
  // Number of bytes of memory to allocate
  uint64 space = 2;
}

// AssignRequest changes the owner of an account
message AssignRequest {
  // The account to assign a new owner to (must be a signer)
  string account = 1;
  
  // The new owner program
  string owner_program = 2;
}

// CreateWithSeedRequest creates a new account with a seed
message CreateWithSeedRequest {
  // The account that will pay for the new account creation (must be a signer)
  string payer = 1;
  
  // The public key of the new account to be created
  string new_account = 2;
  
  // The base public key used to derive the new account address
  string base = 3;
  
  // The seed string used to derive the new account address
  string seed = 4;
  
  // Amount of lamports to transfer to the new account
  uint64 lamports = 5;
  
  // Number of bytes of memory to allocate for the account
  uint64 space = 6;
}

// Extended request messages for new operations
message AllocateWithSeedRequest {
  string account = 1;
  string base = 2;
  string seed = 3;
  uint64 space = 4;
}

message AssignWithSeedRequest {
  string account = 1;
  string base = 2;
  string seed = 3;
  string owner_program = 4;
}

message TransferWithSeedRequest {
  string from = 1;
  string from_base = 2;
  string from_seed = 3;
  string to = 4;
  uint64 lamports = 5;
}

message InitializeNonceAccountRequest {
  string nonce_account = 1;
  string authority = 2;
}

message AuthorizeNonceAccountRequest {
  string nonce_account = 1;
  string current_authority = 2;
  string new_authority = 3;
}

message WithdrawNonceAccountRequest {
  string nonce_account = 1;
  string authority = 2;
  string to = 3;
  uint64 lamports = 4;
}

message AdvanceNonceAccountRequest {
  string nonce_account = 1;
  string authority = 2;
}

message UpgradeNonceAccountRequest {
  string nonce_account = 1;
}

// Response messages - each RPC has its own response type containing the instruction
message CreateResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message TransferResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message AllocateResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message AssignResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message CreateWithSeedResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message AllocateWithSeedResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message AssignWithSeedResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message TransferWithSeedResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message InitializeNonceAccountResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message AuthorizeNonceAccountResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message WithdrawNonceAccountResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message AdvanceNonceAccountResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

message UpgradeNonceAccountResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}