syntax = "proto3";

package protochain.solana.program.token.v1;

import "protochain/solana/transaction/v1/instruction.proto";

option go_package = "github.com/BRBussy/protochain/lib/go/protochain/solana/program/token/v1;token_v1";

// Token Program service for creating SPL Token 2022 instructions
service Service {
  // Creates an InitialiseMint instruction for Token 2022 program
  rpc InitialiseMint(InitialiseMintRequest) returns (InitialiseMintResponse);
  
  // Gets current minimum rent for a token account (mint size)
  rpc GetCurrentMinRentForTokenAccount(GetCurrentMinRentForTokenAccountRequest) returns (GetCurrentMinRentForTokenAccountResponse);
  
  // Parses mint account data into structured format
  rpc ParseMint(ParseMintRequest) returns (ParseMintResponse);
  
  // Creates an InitialiseHoldingAccount instruction for Token 2022 program. When memo_transfer_config.require_incoming_memo is true, returns both initialise and memo-enable instructions.
  rpc InitialiseHoldingAccount(InitialiseHoldingAccountRequest) returns (InitialiseHoldingAccountResponse);
  
  // Gets current minimum rent for a token holding account, optionally accounting for memo transfer extension size when memo_transfer_config is provided.
  rpc GetCurrentMinRentForHoldingAccount(GetCurrentMinRentForHoldingAccountRequest) returns (GetCurrentMinRentForHoldingAccountResponse);
  
  // Creates both system account creation and mint initialization instructions. Memo transfer is not applicable to mint accounts.
  rpc CreateMint(CreateMintRequest) returns (CreateMintResponse);

  // Creates both system account creation and holding account initialization instructions. Adds memo-enable instruction when requested.
  rpc CreateHoldingAccount(CreateHoldingAccountRequest) returns (CreateHoldingAccountResponse);

  // Mint tokens to an existing token account using MintToChecked instruction
  rpc Mint(MintRequest) returns (MintResponse);
}

// Request to create InitialiseMint instruction
message InitialiseMintRequest {
  string mint_pub_key = 1;
  string mint_authority_pub_key = 2;
  string freeze_authority_pub_key = 3;
  uint32 decimals = 4;
}

// Response containing InitialiseMint instruction
message InitialiseMintResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}

// Request to get current rent for token account
message GetCurrentMinRentForTokenAccountRequest {
  // No parameters needed - uses fixed Mint::LEN size
}

// Response with current rent amount
message GetCurrentMinRentForTokenAccountResponse {
  uint64 lamports = 1;
}

// Request to parse mint account
message ParseMintRequest {
  string account_address = 1;
}

// Response with parsed mint data
message ParseMintResponse {
  MintInfo mint = 1;
}

// Structured mint account information
message MintInfo {
  string mint_authority_pub_key = 1;
  string freeze_authority_pub_key = 2;
  uint32 decimals = 3;
  string supply = 4;
  bool is_initialized = 5;
}

message MemoTransferConfig {
  // Require every inbound transfer into the account to include a memo.
  bool require_incoming_memo = 1;
}

// Request to create InitialiseHoldingAccount instruction
message InitialiseHoldingAccountRequest {
  string account_pub_key = 1;
  string mint_pub_key = 2;
  string owner_pub_key = 3;
  MemoTransferConfig memo_transfer_config = 4; // optional, defaults to false
}

// Response containing InitialiseHoldingAccount instruction
message InitialiseHoldingAccountResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1; // legacy single instruction
  repeated protochain.solana.transaction.v1.SolanaInstruction instructions = 2; // canonical list, includes memo enable when requested
}

// Request to get current rent for holding account
message GetCurrentMinRentForHoldingAccountRequest {
  MemoTransferConfig memo_transfer_config = 1; // optional, defaults to false
}

// Response with current rent amount for holding account
message GetCurrentMinRentForHoldingAccountResponse {
  uint64 lamports = 1;
}

// Request to create and initialize a holding account in one call  
message CreateHoldingAccountRequest {
  // System program create fields
  string payer = 1;           // Account paying for creation (signer)
  string new_account = 2;     // Holding account to create (signer)
  
  // Token program initialize holding account fields
  string holding_account_pub_key = 3;   // Same as new_account for validation
  string mint_pub_key = 4;              // Mint this account will hold
  string owner_pub_key = 5;             // Owner of the holding account
  MemoTransferConfig memo_transfer_config = 6; // optional, defaults to false
}

// Response containing both create and initialize instructions
message CreateHoldingAccountResponse {
  repeated protochain.solana.transaction.v1.SolanaInstruction instructions = 1;
}

// Request to create and initialize a mint account in one call
message CreateMintRequest {
  // System program create fields
  string payer = 1;           // Account paying for creation (signer)
  string new_account = 2;     // Mint account to create (signer)
  
  // Token program initialize mint fields  
  string mint_pub_key = 3;              // Same as new_account for validation
  string mint_authority_pub_key = 4;    // Mint authority 
  string freeze_authority_pub_key = 5;  // Freeze authority (optional)
  uint32 decimals = 6;                  // Mint decimals
}

// Response containing both create and initialize instructions
message CreateMintResponse {
  repeated protochain.solana.transaction.v1.SolanaInstruction instructions = 1;
}

// Request to mint tokens to a token account
message MintRequest {
  string mint_pub_key = 1;              // The mint to mint from
  string destination_account_pub_key = 2; // Token account to mint to
  string mint_authority_pub_key = 3;     // Authority that can mint tokens
  string amount = 4;                     // Amount to mint (as string to handle large numbers)
  uint32 decimals = 5;                   // Expected decimals for validation
}

// Response containing Mint instruction
message MintResponse {
  protochain.solana.transaction.v1.SolanaInstruction instruction = 1;
}