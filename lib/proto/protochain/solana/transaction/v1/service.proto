syntax = "proto3";

package protochain.solana.transaction.v1;

import "protochain/solana/transaction/v1/transaction.proto";
import "protochain/solana/transaction/v1/error.proto";
import "protochain/solana/type/v1/commitment_level.proto";

option go_package = "github.com/BRBussy/protochain/lib/go/protochain/solana/transaction/v1;transaction_v1";

service Service {
  // Transaction composition workflow
  rpc CompileTransaction(CompileTransactionRequest) returns (CompileTransactionResponse);
  rpc EstimateTransaction(EstimateTransactionRequest) returns (EstimateTransactionResponse);
  rpc SimulateTransaction(SimulateTransactionRequest) returns (SimulateTransactionResponse);
  rpc SignTransaction(SignTransactionRequest) returns (SignTransactionResponse);
  
  // Asynchronously submits a signed transaction to the network
  // Returns immediately after submission without waiting for confirmation
  // Use MonitorTransaction to poll for confirmation status if needed
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
  
  // Transaction retrieval and monitoring
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
  rpc MonitorTransaction(MonitorTransactionRequest) returns (stream MonitorTransactionResponse);
}

// Request/Response messages
message CompileTransactionRequest {
  Transaction transaction = 1;  // Must be in DRAFT state
  string fee_payer = 2;         // Who pays transaction fees
  string recent_blockhash = 3;  // Optional - will fetch if empty
}

message CompileTransactionResponse {
  Transaction transaction = 1;  // Now in COMPILED state
}

message EstimateTransactionRequest {
  Transaction transaction = 1;  // Must be in COMPILED state
  protochain.solana.type.v1.CommitmentLevel commitment_level = 2;  // Commitment level for fee estimation
}

message EstimateTransactionResponse {
  uint64 compute_units = 1;     // Estimated compute units required
  uint64 fee_lamports = 2;      // Estimated total transaction fee
  uint64 priority_fee = 3;      // Current network priority fee estimate
}

// Fee Management Philosophy:
// - Fee calculation is CLIENT responsibility
// - Services only provide EstimateTransaction for client decision-making
// - Clients call: build instructions → compile → estimate → set fees → sign → submit
// - No automatic fee management in services - pure SDK wrapper approach

message SimulateTransactionRequest {
  Transaction transaction = 1;  // Must be compiled
  protochain.solana.type.v1.CommitmentLevel commitment_level = 2;  // Commitment level for simulation
}

message SimulateTransactionResponse {
  bool success = 1;
  string error = 2;
  repeated string logs = 3;
}

message SignTransactionRequest {
  Transaction transaction = 1;
  
  oneof signing_method {
    SignWithPrivateKeys private_keys = 2;
    SignWithSeeds seeds = 3;
  }
}

message SignTransactionResponse {
  Transaction transaction = 1;
}

message SignWithPrivateKeys {
  repeated string private_keys = 1;  // Base58 encoded private keys
}

message SignWithSeeds {
  repeated KeySeed seeds = 1;
}

message KeySeed {
  string seed = 1;
  string passphrase = 2;
}

// Request to asynchronously submit a transaction to the Solana network
// The method returns immediately after submission without waiting for confirmation
message SubmitTransactionRequest {
  Transaction transaction = 1;  // Must be fully signed
  protochain.solana.type.v1.CommitmentLevel commitment_level = 2;  // Commitment level for transaction submission
}

// Response containing the submission result
// NOTE: This is an asynchronous submission - successful result means the transaction
// was successfully sent to the network, NOT that it was confirmed or executed
// Use MonitorTransaction to poll for confirmation and execution status
message SubmitTransactionResponse {
  string signature = 1;  // Transaction signature
  SubmissionResult submission_result = 2;  // Submission outcome (sent vs failed to send)
  string error_message = 3;  // Error details if submission failed (kept for backward compatibility)
  TransactionError structured_error = 4;  // NEW: Structured error details with certainty indicators
}

enum SubmissionResult {
  SUBMISSION_RESULT_UNSPECIFIED = 0;
  SUBMISSION_RESULT_SUBMITTED = 1;                  // Transaction successfully submitted to network
  SUBMISSION_RESULT_FAILED_VALIDATION = 2;          // Transaction failed pre-submission validation
  SUBMISSION_RESULT_FAILED_NETWORK_ERROR = 3;       // Network/RPC error prevented submission
  SUBMISSION_RESULT_FAILED_INSUFFICIENT_FUNDS = 4;  // Fee payer has insufficient balance
  SUBMISSION_RESULT_FAILED_INVALID_SIGNATURE = 5;   // Transaction signature validation failed
  SUBMISSION_RESULT_INDETERMINATE = 6;              // NEW: State unknown - use structured_error for resolution
}

message GetTransactionRequest {
  string signature = 1;
  protochain.solana.type.v1.CommitmentLevel commitment_level = 2;  // Commitment level for transaction retrieval
}

message GetTransactionResponse {
  Transaction transaction = 1;
}

// Transaction monitoring messages
message MonitorTransactionRequest {
  string signature = 1;                                               // Transaction signature to monitor
  protochain.solana.type.v1.CommitmentLevel commitment_level = 2;       // Target commitment level
  bool include_logs = 3;                                              // Include program execution logs
  uint32 timeout_seconds = 4;                               // Monitor timeout (default: 60)
}

message MonitorTransactionResponse {
  string signature = 1;                                               // Transaction signature being monitored
  TransactionStatus status = 2;                                       // Current transaction status
  uint64 slot = 3;                                          // Blockchain slot where transaction was processed
  string error_message = 4;                                  // Error details if transaction failed
  repeated string logs = 5;                                           // Program execution logs (if requested)
  uint64 compute_units_consumed = 6;                        // Compute units consumed by transaction
  protochain.solana.type.v1.CommitmentLevel current_commitment = 7;     // Current commitment level achieved
}

enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  TRANSACTION_STATUS_RECEIVED = 1;           // Transaction received by validator
  TRANSACTION_STATUS_PROCESSED = 2;          // Transaction processed (commitment: processed)
  TRANSACTION_STATUS_CONFIRMED = 3;          // Transaction confirmed (commitment: confirmed)
  TRANSACTION_STATUS_FINALIZED = 4;          // Transaction finalized (commitment: finalized)
  TRANSACTION_STATUS_FAILED = 5;             // Transaction failed during execution
  TRANSACTION_STATUS_DROPPED = 6;            // Transaction dropped from network
  TRANSACTION_STATUS_TIMEOUT = 7;            // Monitoring timeout reached
}